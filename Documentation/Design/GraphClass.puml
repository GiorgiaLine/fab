@startuml

skinparam class {
    BackgroundColor LemonChiffon
    BackgroundColor<<hypothetical>> LightSkyBlue
}

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

abstract class Artifact <<edge>> {
    -id: ID {unique}
    -hash: Hash
}

abstract class SourceCode {
}
Artifact ^-- SourceCode

class CSourceCode {
}
SourceCode ^-- CSourceCode

class CxxSourceCode {
}
CSourceCode ^-- CxxSourceCode

class FortranSourceCode {
}
SourceCode ^-- FortranSourceCode

abstract class Bitmap <<hypothetical>> {
}
Artifact ^-- Bitmap

class PngBitmap <<hypothetical>> {
}
Bitmap ^-- PngBitmap

class JpegBitmap <<hypothetical>> {
}
Bitmap ^-- JpegBitmap

abstract class CompilerOutput {
}
Artifact ^-- CompilerOutput

class CompilerObject {
}
CompilerOutput ^-- CompilerObject

class FortranModule {
}
CompilerOutput ^-- FortranModule

class CxxModule <<hypothetical>> {
}
CompilerOutput ^-- CxxModule

class Executable {
}
Artifact ^-- Executable

class Library {
}
Artifact ^-- Library

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

abstract class Tool {
}

class Control {
}
Control <- "*" Tool : configuration

abstract class Compiler {
  +useLibrary(name: String, baseDirectory: Directory = None, linking: LinkType = Dynamic, priority: Integer = 0)
  +useLibrary(library: Library, linking: LinkType = static, priority: Integer = 0)
}
Tool ^-- Compiler

class FortranCompiler {
}
Compiler ^-- FortranCompiler

class CeeCompiler {
}
Compiler ^-- CeeCompiler

class CxxCompiler {
}
Compiler ^-- CxxCompiler

class LaTeX {
}
Tool ^-- LaTeX

class PSyclone {
}
Tool ^-- PSyclone

abstract class PreProcessor <<decorator_pattern>> {
}
Tool ^-- PreProcessor
PreProcessor o- Tool

class CeePreProcessor {
}
PreProcessor ^-- CeePreProcessor

class FortranPreProcessor {
}
PreProcessor ^-- FortranPreProcessor

class pFUnitProcessor {
}
PreProcessor ^-- pFUnitProcessor

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

class Transform <<node>> {
}

Transform -> "*" Artifact : inputs
Transform -> "*" Artifact : outputs
Transform -> Tool : performer

@enduml
